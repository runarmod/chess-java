@startuml classdiagram

class IllegalFENException extends Exception {

}

class ChessBoardIterator {
    -ChessBoard board
    -int x
    -int y

    +boolean hasNext()
    +Piece next()

}

class ChessBoard extends ChessBoardIterator {
    -ArrayList<ArrayList<Piece>> board
    -ArrayList<String> moves
    -Piece selectedPiece
    -Piece lastMovedPiece
    -Player white
    -Player black
    -Player turn
    -int halfMoves
    -int fullMoves
    -boolean gameFinished
    -String gameMessage
    -Pawn upgradablePawn

    +Piece getPosition(Position position)
    +void setPosition(Position position, Piece piece)
    +void move(Piece piece, Position to)
    +void move(Piece piece, Position to, boolean isCastle)
    +boolean inCheck(Player player)
    +String getMoves()
    +Iterator<Piece> iterator()
    +Piece getLastPieceMoved()
    +String toString()
    +void setTurn(PieceColor color)
    +void setLastPieceMoved(Piece piece)
    +void disableCastling()
    +String getCastlingRights()
    +String getFEN()
    +Player getPlayerTurn()
    +void setHalfMoves(int moves)
    +int getHalfMoves()
    +void setFullMoves(int moves)
    +int getFullMoves()
    +boolean getGameFinished()
    +String getGameMessage()
    +void setSelectedPiece(Piece piece)
    +Piece getSelectedPiece()
    +Pawn getUpgradablePawn()
    +void promotePawn(Pawn piece, Piece upgrade)
    -void handleCastlingDisabling(Piece piece, Position originalPos)
    -boolean handleEnPassantMove(Piece piece)
    -void setPromotePawn(Pawn piece)
    -void handleHalfMove(Piece piece)
    -void handleFullMove(Piece piece, boolean pieceWasCaptured)
    -void checkGameFinished()
    -boolean inDraw()
    -boolean inStalemate(Player player)
    -boolean inCheckmate(Player player)
}

class Position {
    -int x
    -int y
    +int getX()
    +int getY()
    +boolean insideBoard()
    +Position add(Position position)
    +String toString()
    +int hashCode()
    +boolean equals(Object obj)
}

class Player {
    -boolean white
    -boolean hasTurn
    -int dir
    -boolean canCastleKingSide
    -boolean canCastleQueenSide

    +void toggleHasTurn()
    +boolean hasTurn()
    +String toString()
    +char toChar()
    +int getDir()
    +boolean isWhite()
    +boolean canCastleKingSide()
    +boolean canCastleQueenSide()
    +void setCastling(boolean value, boolean queenSide)
    +void disableCastling()
    +String getCastlingRights()
}

enum PieceColor {
    WHITE
    BLACK
}

abstract class FENParser {
    +{static} String FEN_EXTENSION
    +{static} String DEFAULT_STRING

    +{static} String readFENFromFile(File file)
    +{static} ChessBoard getBoardFromFEN(String input)
    +{static} ChessBoard getBoardFromDefaultFEN()
    +{static} boolean legalFischerRandom(String FENString)
    +{static} String generateFischerRandomFEN()
    +{static} String generateFEN(ChessBoard board)
    +{static} void saveToFile(String content, File location)
    +{static} void saveToFile(String content)
    +{static} File getFileFromChooser()
    -{static} String shuffleString(String string)
    -{static} boolean legalFirstRowFischerRandom(String string)
    -{static} JFileChooser getValidChooser(File defaultSaveDirectory)
}

abstract class Piece {
    #Position pos
    #ChessBoard board
    #Player owner
    #String name
    #int moveCount

    #{abstract} boolean threatening(Position position)
    #boolean messesUpcheck(Position to)
    +{static} Piece placePiece(Player player, Position pos, ChessBoard board, char c)
    +String toString()
    +char toChar()
    +{abstract} Collection<Position> getLegalMoves()
    +int getX()
    +int getY()
    +boolean isValidMove(Position to)
    +boolean isWhite()
    +Position getPos()
    +void setPos(Position pos)
    +void move(Position to)
    +int getMoveCount()
    +void addMovedCount()
    +Player getOwner()
}

abstract class LinearPiece {
    -Collection<Position> legalDirections

    #void setDirections(List<Position> directions)
}

class Bishop {
}

class Queen {
}

class Rook {
}

class Pawn {
}

class Knight {
    -{static} int[] dX
    -{static} int[] dY

    -boolean validOnBoard(Position to)
}

class King {
    +boolean inCheck()
    -boolean positionIsInCheck(Position position)
    -boolean canCastleQueen()
    -boolean canCastleKing()
    -Collection<Position> getCastlingMoves()
}

Piece <|-- LinearPiece
Piece <|-- Pawn
Piece <|-- Knight
Piece <|-- King

LinearPiece <|-- Bishop
LinearPiece <|-- Queen
LinearPiece <|-- Rook

Player "2" *-- "1" ChessBoard : "players"
ChessBoard "1" o-- "n" Piece : "pieces"
Piece "1" -o "1" Position : "position"

@enduml
