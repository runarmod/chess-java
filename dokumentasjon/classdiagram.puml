@startuml classdiagram

class ChessBoard {
    -ArrayList<ArrayList<Piece>> board
    -Player white
    -Player black

    +Piece getPosition(Position position)
    +void move(Piece piece, Position to)
    +boolean inCheck(Player player)
    +Piece getLastPieceMoved()
    +String getCastlingRights()
    +String getFEN()
    +Player getPlayerTurn()
    +boolean getGameFinished()
    +Piece getSelectedPiece()
    -boolean inDraw()
    -boolean inStalemate(Player player)
    -boolean inCheckmate(Player player)
}

class Position {
    -int x
    -int y

    +int getX()
    +int getY()
}

class Player {
    -boolean white

    +void toggleHasTurn()
    +boolean hasTurn()
    +int getDir()
    +boolean isWhite()
    +void disableCastling()
    +String getCastlingRights()
}

abstract class Piece {
    #Position pos
    #ChessBoard board
    #Player owner
    #String name

    #{abstract} boolean threatening(Position position)
    +{abstract} Collection<Position> getLegalMoves()
    +int getX()
    +int getY()
    +boolean isValidMove(Position to)
    +boolean isWhite()
    +Position getPos()
    +void move(Position to)
    +Player getOwner()
}

abstract class LinearPiece {
    -Collection<Position> legalDirections

    #void setDirections(List<Position> directions)
}

class Bishop {
}

class Queen {
}

class Rook {
}

class Pawn {
    -boolean hasMoved
    -boolean hasMadeAnPassant

    +void setHasMadeAnPassant(boolean hasMadeAnPassant)
    +boolean getHasMadeEnPassant()
    -boolean isValidStraightMove(Position to)
    -boolean isValidCaptureMove(Position to)
    -boolean moveIsEnPassant(Position to)
}

class Knight {
    -{static} int[] dX
    -{static} int[] dY

    -boolean validOnBoard(Position to)
}

class King {
    +boolean inCheck()
    -boolean positionIsInCheck(Position position)
    -boolean canCastleQueen()
    -boolean canCastleKing()
    -Collection<Position> getCastlingMoves()
}

Player "2" *-- "1" ChessBoard : "players"
ChessBoard "1" o-r- "*" Piece : "pieces"
Position "1" o-- "1" Piece : "position"
Player "1" *-r- "*" Piece : "owner"

Piece <|-- Pawn
Piece <|-- Knight
Piece <|-- King
Piece <|-u- LinearPiece

LinearPiece <|-d- Bishop
LinearPiece <|-d- Queen
LinearPiece <|-d- Rook

@enduml
